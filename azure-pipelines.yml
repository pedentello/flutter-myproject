trigger:
  - master

stages:
- stage: AndroidStage
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: []
  displayName: Android
  jobs:

  - job: AndroidJob
    displayName: Android
    steps: 

    # replace "key.properties" with your secure file name
    - task: DownloadSecureFile@1
      name: keyprop
      displayName: Download key properties file
      inputs:
        secureFile: 'key.properties' 

    # replace "key.jks" with your secure file name
    - task: DownloadSecureFile@1
      name: key
      displayName: Download signing key
      inputs:
        secureFile: 'key.jks'

    # adjust paths and file names here
    - task: Bash@3
      displayName: Copy config files
      inputs:
        targetType: 'inline'
        script: |
          cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
          cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/key.jks
          
          echo "key.properties copied to $(Build.SourcesDirectory)/android/key.properties"
          echo "key.jks copied to $(Build.SourcesDirectory)/android/app/key.jks"

    - task: FlutterInstall@0
      displayName: "Install Flutter SDK"
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'

    - task: FlutterCommand@0
      displayName: "Run Flutter diagnostics"
      inputs:
        projectDirectory: '.'
        arguments: 'doctor -v'

    - task: FlutterBuild@0
      displayName: "Build application"
      inputs:
        target: 'apk'
        projectDirectory: '$(Build.SourcesDirectory)'

    - task: FlutterTest@0
      displayName: "Run unit tests"
      inputs:
        generateCodeCoverageReport: true
        projectDirectory: '$(Build.SourcesDirectory)'

    - task: CopyFiles@2
      displayName: "Copy app to staging directory"
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)'
        contents: '**/*.apk'
        targetFolder: '$(Build.StagingDirectory)'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: "Publish APK file"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'APK'
        publishLocation: 'Container'

    - task: AppCenterDistribute@3
      inputs:
        serverEndpoint: 'App Center MS'
        appSlug: 'dentello/MyApp'
        appFile: '$(Build.ArtifactStagingDirectory)/**/*.apk'
        symbolsOption: 'Android'
        releaseNotesOption: 'input'
        releaseNotesInput: 'New release'

- stage: iOSStage
  pool: 
    vmImage: 'macos-latest'
  dependsOn: []
  displayName: iOS
  jobs:
 
  - job: iOSJob
    displayName: iOS
    steps: 
          
    - task: InstallAppleCertificate@2
      displayName: Install certificate
      inputs:
        certSecureFile: 'ios_distribution.p12'
        certPwd: 'changeit'
        keychain: 'temp'
    
    - task: InstallAppleProvisioningProfile@1
      displayName: Install provisioning file
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'Bitrise_iOS.mobileprovision'
        removeProfile: false
        
    - task: FlutterInstall@0
      displayName: "Install Flutter SDK"
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'

    - task: FlutterCommand@0
      displayName: "Run Flutter diagnostics"
      inputs:
        projectDirectory: '.'
        arguments: 'doctor -v'

    - task: FlutterBuild@0
      displayName: "Build IOS"
      inputs:
        target: 'ios'
        projectDirectory: '$(Build.SourcesDirectory)'
        buildName: '$(Build.BuildNumber)'
        iosCodesign: false

    - task: FlutterTest@0
      displayName: "Run unit tests"
      inputs:
        generateCodeCoverageReport: true
        projectDirectory: '$(Build.SourcesDirectory)'

    - task: Xcode@5
      displayName: "Manual signing "
      inputs:
        actions: 'build archive'
        signingOption: 'manual'
        signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
        sdk: 'iphoneos'
        scheme: 'Runner'
        packageApp: true
        exportPath: '$(Build.SourcesDirectory)/ios/deploy/Runner.ipa'
        args: '-verbose'

    - task: CopyFiles@2
      displayName: "Copy app to staging directory"
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: '/**/Runner.ipa/myappios.ipa'
        targetFolder: '$(Build.StagingDirectory)'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: "Publish IPA file"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'IPA'
        publishLocation: 'Container'

    - task: AppCenterDistribute@3
      displayName: "Distribute App Center"
      inputs:
        serverEndpoint: 'App Center MS'
        appSlug: 'dentello/MyAppiOS'
        appFile: '$(Build.ArtifactStagingDirectory)/**/*.ipa'
        symbolsOption: Apple
        releaseNotesOption: 'input'
        releaseNotesInput: 'New release'

    - task: AppStoreRelease@1
      displayName: "App Store Release - TestFlight"
      inputs:
        authType: 'ApiKey'
        apiKeyId: 'XXX'
        apiKeyIssuerId: 'XXX'
        apitoken: 'XXX'
        releaseTrack: 'TestFlight'
        appIdentifier: 'com.pedentello.myappios'
        appType: 'iOS'
        ipaPath: '$(Build.ArtifactStagingDirectory)/**/*.ipa'
        shouldSkipWaitingForProcessing: true
        shouldSkipSubmission: true
        appSpecificId: '6474454670'
        installFastlane: false
        serviceEndpoint: 
        
